package org.healthcarecontent.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import org.healthcarecontent.dba.HealthContentRepository.HealthcareContentRepository;
import org.healthcarecontent.model.HealthcareContent;
import org.healthcarecontent.services.RecommendationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import java.util.List;

/**
 * REST controller for managing healthcare content.
 * Provides endpoints to retrieve content details and recommendations.
 */
@RestController
@RequestMapping("/api/v1/content")
public class ContentController {

    private final HealthcareContentRepository contentRepository; // Repository for accessing healthcare content data
    private final RecommendationService recommendationService; // Service for generating content recommendations

    /**
     * Constructor for ContentController.
     *
     * @param contentRepository The repository for accessing healthcare content data.
     * @param recommendationService The service for generating content recommendations.
     */
    public ContentController(HealthcareContentRepository contentRepository, RecommendationService recommendationService) {
        this.contentRepository = contentRepository;
        this.recommendationService = recommendationService;
    }

    /**
     * Endpoint to get recommendations for a specific content ID.
     *
     * @param contentId The ID of the content for which recommendations are requested.
     * @return A Mono containing a ResponseEntity with a list of recommended HealthcareContent.
     */
    @Operation(
            summary = "Get content recommendations",
            description = "Returns a list of recommended healthcare content items for the given content ID. The recommendations are generated by an external FastAPI service."
    )
    @GetMapping("/{contentId}/recommendations")
    public Mono<ResponseEntity<List<HealthcareContent>>> getRecommendations(
            @Parameter(description = "ID of the content to get recommendations for", required = true)
            @PathVariable(name="contentId") Long contentId) {
        return recommendationService.getRecommendations(contentId, 10)
                .map(ResponseEntity::ok);
    }

    /**
     * Endpoint to retrieve the details of a specific healthcare content item by its unique ID.
     *
     * @param contentId The ID of the content to retrieve.
     * @return A ResponseEntity containing the HealthcareContent if found, or a 404 status if not found.
     */
    @Operation(
            summary = "Get content by ID",
            description = "Retrieves the details of a specific healthcare content item by its unique ID."
    )
    @GetMapping("/{contentId}")
    public ResponseEntity<HealthcareContent> getContentById(
            @Parameter(description = "ID of the content to retrieve", required = true)
            @PathVariable(name="contentId") Long contentId) {
        return contentRepository.findById(contentId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}